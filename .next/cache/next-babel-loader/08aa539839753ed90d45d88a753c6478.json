{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// Big thank you goes out to Jeremy Gillick on this solution\n// I have no idea if this is good practice or not - but it is a nice short term solution\n// https://stackoverflow.com/questions/51662609/react-programmatically-opening-modals-and-cleaning-up-automatically\nexport var overlay = {\n  create: function create() {\n    if (true) {\n      console.log(children); // first append a div to the document body\n\n      var container = document.createElement('div');\n      document.body.appendChild(container); // create an react reference with customized arguements and children nodes\n\n      var overlayReference = /*#__PURE__*/React.createElement('div', _objectSpread({}, props), null); // render new overlay element inside of DOM container\n\n      ReactDOM.render(overlayReference, container);\n      return this.destroy(container);\n    }\n  },\n  destroy: function destroy(container) {\n    if (true) {\n      // destroy from virtual DOM\n      ReactDOM.unmountComponentAtNode(container); // destroy reference of container\n\n      container.parentNode.removeChild(container);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/components/overlay.tsx"],"names":["React","ReactDOM","overlay","create","console","log","children","container","document","createElement","body","appendChild","overlayReference","props","render","destroy","unmountComponentAtNode","parentNode","removeChild"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAGA;AACA;AACA;AAEA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,MADqB,oBACZ;AACP,cAAkC;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EADgC,CAEhC;;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,SAA1B,EAJgC,CAKhC;;AACA,UAAMK,gBAAgB,gBAAGZ,KAAK,CAACS,aAAN,CAAoB,KAApB,oBAAgCI,KAAhC,GAAyC,IAAzC,CAAzB,CANgC,CAOhC;;AACAZ,MAAAA,QAAQ,CAACa,MAAT,CAAgBF,gBAAhB,EAAkCL,SAAlC;AACA,aAAO,KAAKQ,OAAL,CAAaR,SAAb,CAAP;AACD;AACF,GAboB;AAcrBQ,EAAAA,OAdqB,mBAcbR,SAda,EAcF;AACjB,cAAkC;AAChC;AACAN,MAAAA,QAAQ,CAACe,sBAAT,CAAgCT,SAAhC,EAFgC,CAGhC;;AACAA,MAAAA,SAAS,CAACU,UAAV,CAAqBC,WAArB,CAAiCX,SAAjC;AACD;AACF;AArBoB,CAAhB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Alert from './alert';\n\n// Big thank you goes out to Jeremy Gillick on this solution\n// I have no idea if this is good practice or not - but it is a nice short term solution\n// https://stackoverflow.com/questions/51662609/react-programmatically-opening-modals-and-cleaning-up-automatically\n\nexport const overlay = {\n  create() {\n    if (typeof window != 'undefined') {\n      console.log(children);\n      // first append a div to the document body\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      // create an react reference with customized arguements and children nodes\n      const overlayReference = React.createElement('div', { ...props }, null);\n      // render new overlay element inside of DOM container\n      ReactDOM.render(overlayReference, container);\n      return this.destroy(container);\n    }\n  },\n  destroy(container) {\n    if (typeof window != 'undefined') {\n      // destroy from virtual DOM\n      ReactDOM.unmountComponentAtNode(container);\n      // destroy reference of container\n      container.parentNode.removeChild(container);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}