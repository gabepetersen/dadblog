{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nexport default ((req, res) => {\n  const postsDirectory = path.join(process.cwd(), 'posts'); // I love ES6 babbyyyyyy\n\n  const {\n    title,\n    text,\n    username\n  } = req.body; // create url id / filename\n\n  const url = title.toLowerCase().replace(' ', '-'); // check to see if unique title\n\n  const fileNames = fs.readdirSync(postsDirectory);\n  fileNames.forEach(filename => {\n    // get ride of .md\n    if (filename.replace(/\\.md$/, '') == url) {\n      res.status(400).json({\n        text: 'Title already exists'\n      });\n      return;\n    }\n  }); // create write stream\n\n  const fileStream = fs.createWriteStream('../posts/' + url + '.md'); // write to the md file\n\n  fileStream.write('---\\r\\n');\n  fileStream.write('title: \\'' + title + '\\'\\r\\n');\n  fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n  fileStream.write('---\\r\\n\\r\\n');\n  fileStream.write(text); // create finish event callback\n\n  fileStream.on('finish', () => {\n    res.status(200).json({\n      text: 'Blog Successfully Uploaded'\n    });\n    return;\n  }); // create errror event callback\n\n  fileStream.on('error', err => {\n    res.status(404).json({\n      text: `Error in Callback: ${err}`\n    });\n    return;\n  });\n  res.status(404).json({\n    text: 'filestream didn\\'t finish'\n  });\n});","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/pages/api/post-blog.tsx"],"names":["fs","path","req","res","postsDirectory","join","process","cwd","title","text","username","body","url","toLowerCase","replace","fileNames","readdirSync","forEach","filename","status","json","fileStream","createWriteStream","write","Date","on","err"],"mappings":"AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,QAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,CAD4D,CAE5D;;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA4BR,GAAG,CAACS,IAAtC,CAH4D,CAK5D;;AACA,QAAMC,GAAG,GAAGJ,KAAK,CAACK,WAAN,GAAoBC,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAZ,CAN4D,CAO5D;;AACA,QAAMC,SAAS,GAAGf,EAAE,CAACgB,WAAH,CAAeZ,cAAf,CAAlB;AACAW,EAAAA,SAAS,CAACE,OAAV,CAAmBC,QAAD,IAAc;AAC9B;AACA,QAAIA,QAAQ,CAACJ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,KAAiCF,GAArC,EAA0C;AACxCT,MAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEX,QAAAA,IAAI,EAAE;AAAR,OAArB;AACA;AACD;AACF,GAND,EAT4D,CAgB5D;;AACA,QAAMY,UAAU,GAAGrB,EAAE,CAACsB,iBAAH,CAAsB,cAAcV,GAAd,GAAoB,KAA1C,CAAnB,CAjB4D,CAkB5D;;AACAS,EAAAA,UAAU,CAACE,KAAX,CAAiB,SAAjB;AACAF,EAAAA,UAAU,CAACE,KAAX,CAAiB,cAAcf,KAAd,GAAsB,QAAvC;AACAa,EAAAA,UAAU,CAACE,KAAX,CAAiB,aAAa,IAAIC,IAAJ,EAAb,GAA0B,QAA3C;AACAH,EAAAA,UAAU,CAACE,KAAX,CAAiB,aAAjB;AACAF,EAAAA,UAAU,CAACE,KAAX,CAAiBd,IAAjB,EAvB4D,CAwB5D;;AACAY,EAAAA,UAAU,CAACI,EAAX,CAAc,QAAd,EAAwB,MAAM;AAC5BtB,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEX,MAAAA,IAAI,EAAE;AAAR,KAArB;AACA;AACD,GAHD,EAzB4D,CA6B5D;;AACAY,EAAAA,UAAU,CAACI,EAAX,CAAc,OAAd,EAAwBC,GAAD,IAAS;AAC9BvB,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEX,MAAAA,IAAI,EAAG,sBAAqBiB,GAAI;AAAlC,KAArB;AACA;AACD,GAHD;AAKAvB,EAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEX,IAAAA,IAAI,EAAE;AAAR,GAArB;AACD,CApCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fs from 'fs';\nimport path from 'path';\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  const postsDirectory = path.join(process.cwd(), 'posts');\n  // I love ES6 babbyyyyyy\n  const { title, text, username } = req.body;\n\n  // create url id / filename\n  const url = title.toLowerCase().replace(' ', '-');\n  // check to see if unique title\n  const fileNames = fs.readdirSync(postsDirectory);\n  fileNames.forEach((filename) => {\n    // get ride of .md\n    if (filename.replace(/\\.md$/, '') == url) {\n      res.status(400).json({ text: 'Title already exists' });\n      return;\n    }\n  });\n  // create write stream\n  const fileStream = fs.createWriteStream(('../posts/' + url + '.md'));\n  // write to the md file\n  fileStream.write('---\\r\\n');\n  fileStream.write('title: \\'' + title + '\\'\\r\\n');\n  fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n  fileStream.write('---\\r\\n\\r\\n');\n  fileStream.write(text);\n  // create finish event callback\n  fileStream.on('finish', () => {\n    res.status(200).json({ text: 'Blog Successfully Uploaded' });\n    return;\n  });\n  // create errror event callback\n  fileStream.on('error', (err) => {\n    res.status(404).json({ text: `Error in Callback: ${err}` });\n    return;\n  })\n\n  res.status(404).json({ text: 'filestream didn\\'t finish' });\n}\n\n"]},"metadata":{},"sourceType":"module"}