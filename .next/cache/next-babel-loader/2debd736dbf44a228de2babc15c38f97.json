{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nexport default ((req, res) => {\n  try {\n    const postsDirectory = path.join(process.cwd(), 'posts'); // I love ES6 babbyyyyyy\n\n    const {\n      title,\n      text,\n      username\n    } = req.body;\n\n    if (username !== 'gabepetersen') {\n      // send unauth code\n      res.status(403).json({\n        text: 'unauthorized user'\n      });\n    }\n\n    console.log(postsDirectory); // create url id / filename\n\n    const url = title.toLowerCase().replace(' ', '-'); // check to see if unique title\n\n    const fileNames = fs.readdirSync(postsDirectory);\n    fileNames.forEach(filename => {\n      // check if post already exists\n      if (filename.replace(/\\.md$/, '') == url) {\n        // send not acceptable if post exists already\n        res.status(406).json({\n          text: 'Title already exists'\n        });\n        return;\n      }\n    }); // create write stream\n\n    const fileStream = fs.createWriteStream(postsDirectory + url + '.md');\n    fileStream.write('---\\r\\n');\n    fileStream.write('title: \\'' + title + '\\'\\r\\n');\n    fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n    fileStream.write('---\\r\\n\\r\\n');\n    fileStream.write(text); // create finish event callback - send created code\n\n    fileStream.on('finish', () => {\n      res.status(201).json({\n        text: 'Blog Successfully Uploaded'\n      });\n      return;\n    }); // create errror event callback\n\n    fileStream.on('error', err => {\n      res.status(400).json({\n        text: `Error in Writing File: ${err}`\n      });\n      return;\n    });\n  } catch (err) {\n    res.status(400).json({\n      text: `Error in Request: ${err}`\n    });\n  }\n  /*\n  // write to the md file\n  \n  */\n\n});","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/pages/api/post-blog.tsx"],"names":["fs","path","req","res","postsDirectory","join","process","cwd","title","text","username","body","status","json","console","log","url","toLowerCase","replace","fileNames","readdirSync","forEach","filename","fileStream","createWriteStream","write","Date","on","err"],"mappings":"AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,MAAI;AACF,UAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,CADE,CAEF;;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA4BR,GAAG,CAACS,IAAtC;;AAEA,QAAID,QAAQ,KAAK,cAAjB,EAAiC;AAC/B;AACAP,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAArB;AACD;;AAEDK,IAAAA,OAAO,CAACC,GAAR,CAAYX,cAAZ,EAVE,CAYF;;AACA,UAAMY,GAAG,GAAGR,KAAK,CAACS,WAAN,GAAoBC,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAZ,CAbE,CAcF;;AACA,UAAMC,SAAS,GAAGnB,EAAE,CAACoB,WAAH,CAAehB,cAAf,CAAlB;AACAe,IAAAA,SAAS,CAACE,OAAV,CAAmBC,QAAD,IAAc;AAC9B;AACA,UAAIA,QAAQ,CAACJ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,KAAiCF,GAArC,EAA0C;AACxC;AACAb,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,UAAAA,IAAI,EAAE;AAAR,SAArB;AACA;AACD;AACF,KAPD,EAhBE,CAwBF;;AACA,UAAMc,UAAU,GAAGvB,EAAE,CAACwB,iBAAH,CAAsBpB,cAAc,GAAGY,GAAjB,GAAuB,KAA7C,CAAnB;AACAO,IAAAA,UAAU,CAACE,KAAX,CAAiB,SAAjB;AACAF,IAAAA,UAAU,CAACE,KAAX,CAAiB,cAAcjB,KAAd,GAAsB,QAAvC;AACAe,IAAAA,UAAU,CAACE,KAAX,CAAiB,aAAa,IAAIC,IAAJ,EAAb,GAA0B,QAA3C;AACAH,IAAAA,UAAU,CAACE,KAAX,CAAiB,aAAjB;AACAF,IAAAA,UAAU,CAACE,KAAX,CAAiBhB,IAAjB,EA9BE,CA+BF;;AACAc,IAAAA,UAAU,CAACI,EAAX,CAAc,QAAd,EAAwB,MAAM;AAC5BxB,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAArB;AACA;AACD,KAHD,EAhCE,CAoCF;;AACAc,IAAAA,UAAU,CAACI,EAAX,CAAc,OAAd,EAAwBC,GAAD,IAAS;AAC9BzB,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,QAAAA,IAAI,EAAG,0BAAyBmB,GAAI;AAAtC,OAArB;AACA;AACD,KAHD;AAKD,GA1CD,CA0CE,OAAOA,GAAP,EAAY;AACZzB,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,MAAAA,IAAI,EAAG,qBAAoBmB,GAAI;AAAjC,KAArB;AACD;AAGD;;;;;AAID,CApDD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fs from 'fs';\nimport path from 'path';\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    const postsDirectory = path.join(process.cwd(), 'posts');\n    // I love ES6 babbyyyyyy\n    const { title, text, username } = req.body;\n\n    if (username !== 'gabepetersen') {\n      // send unauth code\n      res.status(403).json({ text: 'unauthorized user' });\n    }\n\n    console.log(postsDirectory);\n\n    // create url id / filename\n    const url = title.toLowerCase().replace(' ', '-');\n    // check to see if unique title\n    const fileNames = fs.readdirSync(postsDirectory);\n    fileNames.forEach((filename) => {\n      // check if post already exists\n      if (filename.replace(/\\.md$/, '') == url) {\n        // send not acceptable if post exists already\n        res.status(406).json({ text: 'Title already exists' });\n        return;\n      }\n    });\n    // create write stream\n    const fileStream = fs.createWriteStream((postsDirectory + url + '.md'));\n    fileStream.write('---\\r\\n');\n    fileStream.write('title: \\'' + title + '\\'\\r\\n');\n    fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n    fileStream.write('---\\r\\n\\r\\n');\n    fileStream.write(text);\n    // create finish event callback - send created code\n    fileStream.on('finish', () => {\n      res.status(201).json({ text: 'Blog Successfully Uploaded' });\n      return;\n    });\n    // create errror event callback\n    fileStream.on('error', (err) => {\n      res.status(400).json({ text: `Error in Writing File: ${err}` });\n      return;\n    })\n\n  } catch (err) {\n    res.status(400).json({ text: `Error in Request: ${err}` });\n  }\n  \n\n  /*\n  // write to the md file\n  \n  */\n}\n\n"]},"metadata":{},"sourceType":"module"}