{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter'; // get current posts folder under current working directory\n\nvar postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // get file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // remove '.md' from filename to get id\n    var id = fileName.replace(/\\.md$/, ''); // read markdwon file as a string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents);\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  });\n  console.log(allPostsData); // sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/lib/posts.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","console","log","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,IAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,MAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,MAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAc,UAACC,QAAD,EAAc;AAC/C;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF+C,CAI/C;;AACA,QAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,QAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN+C,CAQ/C;;AACA,QAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B;AAEA;AACEH,MAAAA,EAAE,EAAFA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAfoB,CAArB;AAgBAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,YAAZ,EAnBmC,CAoBnC;;AACA,SAAOA,YAAY,CAACY,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACjC,QAAGD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAd,EAAoB;AAClB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\n// get current posts folder under current working directory\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nexport function getSortedPostsData() {\n  // get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map((fileName) => {\n    // remove '.md' from filename to get id\n    const id = fileName.replace(/\\.md$/, '');\n\n    // read markdwon file as a string\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    return {\n      id, \n      ...matterResult.data\n    }\n  });\n  console.log(allPostsData);\n  // sort posts by date\n  return allPostsData.sort((a, b) => {\n    if(a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}