{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nexport default ((req, res) => {\n  try {\n    return new Promise((resolve, reject) => {\n      const postsDirectory = path.join(process.cwd(), 'posts'); // I love ES6 babbyyyyyy\n\n      const {\n        title,\n        text,\n        username\n      } = req.body;\n\n      if (username !== 'gabepetersen') {\n        // send unauth code\n        res.status(403).json({\n          text: 'unauthorized user'\n        });\n      }\n\n      console.log(postsDirectory); // create url id / filename\n\n      const url = title.toLowerCase().replace(' ', '-'); // check to see if unique title\n\n      const fileNames = fs.readdirSync(postsDirectory);\n      fileNames.forEach(filename => {\n        // check if post already exists\n        if (filename.replace(/\\.md$/, '') == url) {\n          // send not acceptable if post exists already\n          res.status(406).json({\n            text: 'Title already exists'\n          });\n          return;\n        }\n      }); // create write stream\n\n      const fileStream = fs.createWriteStream(postsDirectory + url + '.md');\n      fileStream.write('---\\r\\n');\n      fileStream.write('title: \\'' + title + '\\'\\r\\n');\n      fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n      fileStream.write('---\\r\\n\\r\\n');\n      fileStream.write(text);\n      fileStream.end(); // create finish event callback - send created code\n\n      fileStream.on('finish', () => {\n        res.status(201).json({\n          text: 'Blog Successfully Uploaded'\n        });\n        return;\n      }); // create errror event callback\n\n      fileStream.on('error', err => {\n        res.status(400).json({\n          text: `Error in Writing File: ${err}`\n        });\n        return;\n      });\n    });\n  } catch (err) {\n    res.status(400).json({\n      text: `Error in Request: ${err}`\n    });\n  }\n});","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/pages/api/post-blog.tsx"],"names":["fs","path","req","res","Promise","resolve","reject","postsDirectory","join","process","cwd","title","text","username","body","status","json","console","log","url","toLowerCase","replace","fileNames","readdirSync","forEach","filename","fileStream","createWriteStream","write","Date","end","on","err"],"mappings":"AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,MAAI;AACF,WAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,YAAMC,cAAc,GAAGN,IAAI,CAACO,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,CAD8C,CAE9C;;AACA,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,UAA4BX,GAAG,CAACY,IAAtC;;AAEA,UAAID,QAAQ,KAAK,cAAjB,EAAiC;AAC/B;AACAV,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,UAAAA,IAAI,EAAE;AAAR,SAArB;AACD;;AAEDK,MAAAA,OAAO,CAACC,GAAR,CAAYX,cAAZ,EAV8C,CAY9C;;AACA,YAAMY,GAAG,GAAGR,KAAK,CAACS,WAAN,GAAoBC,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAZ,CAb8C,CAc9C;;AACA,YAAMC,SAAS,GAAGtB,EAAE,CAACuB,WAAH,CAAehB,cAAf,CAAlB;AACAe,MAAAA,SAAS,CAACE,OAAV,CAAmBC,QAAD,IAAc;AAC9B;AACA,YAAIA,QAAQ,CAACJ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,KAAiCF,GAArC,EAA0C;AACxC;AACAhB,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,YAAAA,IAAI,EAAE;AAAR,WAArB;AACA;AACD;AACF,OAPD,EAhB8C,CAwB9C;;AACA,YAAMc,UAAU,GAAG1B,EAAE,CAAC2B,iBAAH,CAAsBpB,cAAc,GAAGY,GAAjB,GAAuB,KAA7C,CAAnB;AACAO,MAAAA,UAAU,CAACE,KAAX,CAAiB,SAAjB;AACAF,MAAAA,UAAU,CAACE,KAAX,CAAiB,cAAcjB,KAAd,GAAsB,QAAvC;AACAe,MAAAA,UAAU,CAACE,KAAX,CAAiB,aAAa,IAAIC,IAAJ,EAAb,GAA0B,QAA3C;AACAH,MAAAA,UAAU,CAACE,KAAX,CAAiB,aAAjB;AACAF,MAAAA,UAAU,CAACE,KAAX,CAAiBhB,IAAjB;AACAc,MAAAA,UAAU,CAACI,GAAX,GA/B8C,CAgC9C;;AACAJ,MAAAA,UAAU,CAACK,EAAX,CAAc,QAAd,EAAwB,MAAM;AAC5B5B,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,UAAAA,IAAI,EAAE;AAAR,SAArB;AACA;AACD,OAHD,EAjC8C,CAqC9C;;AACAc,MAAAA,UAAU,CAACK,EAAX,CAAc,OAAd,EAAwBC,GAAD,IAAS;AAC9B7B,QAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,UAAAA,IAAI,EAAG,0BAAyBoB,GAAI;AAAtC,SAArB;AACA;AACD,OAHD;AAID,KA1CM,CAAP;AA2CD,GA5CD,CA4CE,OAAOA,GAAP,EAAY;AACZ7B,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,MAAAA,IAAI,EAAG,qBAAoBoB,GAAI;AAAjC,KAArB;AACD;AACF,CAhDD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fs from 'fs';\nimport path from 'path';\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    return new Promise<string>((resolve, reject) => {\n      const postsDirectory = path.join(process.cwd(), 'posts');\n      // I love ES6 babbyyyyyy\n      const { title, text, username } = req.body;\n\n      if (username !== 'gabepetersen') {\n        // send unauth code\n        res.status(403).json({ text: 'unauthorized user' });\n      }\n\n      console.log(postsDirectory);\n\n      // create url id / filename\n      const url = title.toLowerCase().replace(' ', '-');\n      // check to see if unique title\n      const fileNames = fs.readdirSync(postsDirectory);\n      fileNames.forEach((filename) => {\n        // check if post already exists\n        if (filename.replace(/\\.md$/, '') == url) {\n          // send not acceptable if post exists already\n          res.status(406).json({ text: 'Title already exists' });\n          return;\n        }\n      });\n      // create write stream\n      const fileStream = fs.createWriteStream((postsDirectory + url + '.md'));\n      fileStream.write('---\\r\\n');\n      fileStream.write('title: \\'' + title + '\\'\\r\\n');\n      fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n      fileStream.write('---\\r\\n\\r\\n');\n      fileStream.write(text);\n      fileStream.end();\n      // create finish event callback - send created code\n      fileStream.on('finish', () => {\n        res.status(201).json({ text: 'Blog Successfully Uploaded' });\n        return;\n      });\n      // create errror event callback\n      fileStream.on('error', (err) => {\n        res.status(400).json({ text: `Error in Writing File: ${err}` });\n        return;\n      })\n    })\n  } catch (err) {\n    res.status(400).json({ text: `Error in Request: ${err}` });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}