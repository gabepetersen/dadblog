{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// Big thank you goes out to Jeremy Gillick on this solution\n// I have no idea if this is good practice or not - but it is a nice short term solution\n// https://stackoverflow.com/questions/51662609/react-programmatically-opening-modals-and-cleaning-up-automatically\nexport const overlay = {\n  create(children, props) {\n    if (false) {\n      debugger;\n      console.log(children); // first append a div to the document body\n\n      const container = document.createElement('div');\n      document.body.appendChild(container); // create an react reference with customized arguements and children nodes\n\n      const overlayReference = /*#__PURE__*/React.createElement(children, _objectSpread({}, props), container); // render new overlay element inside of DOM container\n\n      ReactDOM.render(overlayReference, container);\n      return this.destroy(container);\n    }\n  },\n\n  destroy(container) {\n    if (false) {\n      // destroy from virtual DOM\n      ReactDOM.unmountComponentAtNode(container); // destroy reference of container\n\n      container.parentNode.removeChild(container);\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/components/overlay.tsx"],"names":["React","ReactDOM","overlay","create","children","props","console","log","container","document","createElement","body","appendChild","overlayReference","render","destroy","unmountComponentAtNode","parentNode","removeChild"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAGA;AACA;AACA;AAEA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,MAAM,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACtB,eAAkC;AAChC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAFgC,CAGhC;;AACA,YAAMI,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,SAA1B,EALgC,CAMhC;;AACA,YAAMK,gBAAgB,gBAAGb,KAAK,CAACU,aAAN,CAAoBN,QAApB,oBAAmCC,KAAnC,GAA4CG,SAA5C,CAAzB,CAPgC,CAQhC;;AACAP,MAAAA,QAAQ,CAACa,MAAT,CAAgBD,gBAAhB,EAAkCL,SAAlC;AACA,aAAO,KAAKO,OAAL,CAAaP,SAAb,CAAP;AACD;AACF,GAdoB;;AAerBO,EAAAA,OAAO,CAACP,SAAD,EAAY;AACjB,eAAkC;AAChC;AACAP,MAAAA,QAAQ,CAACe,sBAAT,CAAgCR,SAAhC,EAFgC,CAGhC;;AACAA,MAAAA,SAAS,CAACS,UAAV,CAAqBC,WAArB,CAAiCV,SAAjC;AACD;AACF;;AAtBoB,CAAhB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Alert from './alert';\n\n// Big thank you goes out to Jeremy Gillick on this solution\n// I have no idea if this is good practice or not - but it is a nice short term solution\n// https://stackoverflow.com/questions/51662609/react-programmatically-opening-modals-and-cleaning-up-automatically\n\nexport const overlay = {\n  create(children, props) {\n    if (typeof window != 'undefined') {\n      debugger;\n      console.log(children);\n      // first append a div to the document body\n      const container = document.createElement('div');\n      document.body.appendChild(container);\n      // create an react reference with customized arguements and children nodes\n      const overlayReference = React.createElement(children, { ...props }, container );\n      // render new overlay element inside of DOM container\n      ReactDOM.render(overlayReference, container);\n      return this.destroy(container);\n    }\n  },\n  destroy(container) {\n    if (typeof window != 'undefined') {\n      // destroy from virtual DOM\n      ReactDOM.unmountComponentAtNode(container);\n      // destroy reference of container\n      container.parentNode.removeChild(container);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}