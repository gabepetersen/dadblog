{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html'; // get current posts folder under current working directory\n\nvar postsDirectory = path.join(process.cwd(), 'posts'); // get blog post data from markdown files\n\nexport function getSortedPostsData() {\n  // get file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // remove '.md' from filename to get id\n    var id = fileName.replace(/\\.md$/, ''); // read markdwon file as a string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, 'utf8'); // use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents);\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // sort posts by date\n\n  return allPostsData.sort(function (a, b) {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  // get all file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  /**\n    Returns array that looks like this:\n    [\n      {\n        params: {\n          id: 'ssg-ssr'\n        }\n      },\n      {\n        params: {\n          id: 'pre-rendering'\n        }\n      }\n    ]\n   */\n\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getPostData(_x) {\n  return _getPostData.apply(this, arguments);\n}\n/**\n * uploadNewPost creates a new markdown file with the given info\n * @param title \n * @param text \n * @returns Promise<string>\n */\n\nfunction _getPostData() {\n  _getPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var fullPath, fileContents, matterResult, processedContent, contentHTML;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n            fileContents = fs.readFileSync(fullPath, 'utf8'); // use gray-matter to parse the post metadata section\n\n            matterResult = matter(fileContents); // use remark to convert markdown to HTML string\n\n            _context.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context.sent;\n            contentHTML = processedContent.toString(); // Combine data with the id and contentHTML\n\n            return _context.abrupt(\"return\", _objectSpread({\n              id: id,\n              contentHTML: contentHTML\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostData.apply(this, arguments);\n}\n\nexport function uploadNewPost(title, text) {\n  return new Promise(function (resolve, reject) {\n    // create url id / filename\n    var url = title.toLowerCase().replace(' ', '-'); // check to see if unique title\n\n    var fileNames = fs.readdirSync(postsDirectory);\n    fileNames.forEach(function (filename) {\n      // get ride of .md\n      if (filename.replace(/\\.md$/, '') == url) {\n        reject('Title Already Exists');\n        return;\n      }\n    }); // create write stream\n\n    var fileStream = fs.createWriteStream('../posts/' + url + '.md'); // write to the md file\n\n    fileStream.write('---\\r\\n');\n    fileStream.write('title: \\'' + title + '\\'\\r\\n');\n    fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n    fileStream.write('---\\r\\n\\r\\n');\n    fileStream.write(text); // create finish event callback\n\n    fileStream.on('finish', function () {\n      resolve('Finished Creating Post');\n    }); // create errror event callback\n\n    fileStream.on('error', function (err) {\n      reject(err);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/lib/posts.tsx"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","use","content","processedContent","contentHTML","toString","uploadNewPost","title","text","Promise","resolve","reject","url","toLowerCase","forEach","filename","fileStream","createWriteStream","write","Date","on","err"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\n\n// get current posts folder under current working directory\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\n// get blog post data from markdown files\nexport function getSortedPostsData() {\n  // get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map((fileName) => {\n    // remove '.md' from filename to get id\n    const id = fileName.replace(/\\.md$/, '');\n\n    // read markdwon file as a string\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    return {\n      id, \n      ...matterResult.data as {date: string, title: string}\n    }\n  });\n  // sort posts by date\n  return allPostsData.sort((a, b) => {\n    if(a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nexport function getAllPostIds() {\n  // get all file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory)\n  /**\n    Returns array that looks like this:\n    [\n      {\n        params: {\n          id: 'ssg-ssr'\n        }\n      },\n      {\n        params: {\n          id: 'pre-rendering'\n        }\n      }\n    ]\n   */\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    }\n  })\n}\n\nexport async function getPostData(id: string) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n  // use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents);\n\n  // use remark to convert markdown to HTML string\n  const processedContent = await remark().use(html).process(matterResult.content)\n  const contentHTML = processedContent.toString();\n\n  // Combine data with the id and contentHTML\n\n  return {\n    id, \n    contentHTML,\n    ...matterResult.data as {date: string, title: string}\n  }\n}\n\n/**\n * uploadNewPost creates a new markdown file with the given info\n * @param title \n * @param text \n * @returns Promise<string>\n */\nexport function uploadNewPost(title: string, text: string) {\n  return new Promise<string>((resolve, reject) => {\n    // create url id / filename\n    const url = title.toLowerCase().replace(' ', '-');\n    // check to see if unique title\n    const fileNames = fs.readdirSync(postsDirectory);\n    fileNames.forEach((filename) => {\n      // get ride of .md\n      if (filename.replace(/\\.md$/, '') == url) {\n        reject('Title Already Exists');\n        return;\n      }\n    });\n    // create write stream\n    const fileStream = fs.createWriteStream(('../posts/' + url + '.md'));\n    // write to the md file\n    fileStream.write('---\\r\\n');\n    fileStream.write('title: \\'' + title + '\\'\\r\\n');\n    fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n    fileStream.write('---\\r\\n\\r\\n');\n    fileStream.write(text);\n    // create finish event callback\n    fileStream.on('finish', () => {\n      resolve('Finished Creating Post');\n    });\n    // create errror event callback\n    fileStream.on('error', (err) => {\n      reject(err);\n    })\n  });\n}"]},"metadata":{},"sourceType":"module"}