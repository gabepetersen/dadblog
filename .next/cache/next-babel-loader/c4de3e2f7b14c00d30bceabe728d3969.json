{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html'; // get current posts folder under current working directory\n\nconst postsDirectory = path.join(process.cwd(), 'posts'); // get blog post data from markdown files\n\nexport function getSortedPostsData() {\n  // get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // remove '.md' from filename to get id\n    const id = fileName.replace(/\\.md$/, ''); // read markdwon file as a string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  // get all file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  /**\n    Returns array that looks like this:\n    [\n      {\n        params: {\n          id: 'ssg-ssr'\n        }\n      },\n      {\n        params: {\n          id: 'pre-rendering'\n        }\n      }\n    ]\n   */\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // use remark to convert markdown to HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHTML = processedContent.toString(); // Combine data with the id and contentHTML\n\n  return _objectSpread({\n    id,\n    contentHTML\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/lib/posts.tsx"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","processedContent","use","content","contentHTML","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;AACA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,C,CAEA;;AACA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAC/C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF+C,CAI/C;;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN+C,CAQ/C;;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B;AAEA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAfoB,CAArB,CAHmC,CAmBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAGD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAd,EAAoB;AAClB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B;AACA,QAAMhB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA;;;;;;;;;;;;;;;;AAeA,SAAOK,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AACjC,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeY,WAAf,CAA2Bb,EAA3B,EAAuC;AAC5C,QAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA2B,GAAEU,EAAG,KAAhC,CAAjB;AACA,QAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAF4C,CAI5C;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAL4C,CAO5C;;AACA,QAAMW,gBAAgB,GAAG,MAAM1B,MAAM,GAAG2B,GAAT,CAAa1B,IAAb,EAAmBG,OAAnB,CAA2Ba,YAAY,CAACW,OAAxC,CAA/B;AACA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAT4C,CAW5C;;AAEA;AACElB,IAAAA,EADF;AAEEiB,IAAAA;AAFF,KAGKZ,YAAY,CAACC,IAHlB;AAKD","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\n\n// get current posts folder under current working directory\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\n// get blog post data from markdown files\nexport function getSortedPostsData() {\n  // get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map((fileName) => {\n    // remove '.md' from filename to get id\n    const id = fileName.replace(/\\.md$/, '');\n\n    // read markdwon file as a string\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents);\n\n    return {\n      id, \n      ...matterResult.data as {date: string, title: string}\n    }\n  });\n  // sort posts by date\n  return allPostsData.sort((a, b) => {\n    if(a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nexport function getAllPostIds() {\n  // get all file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory)\n  /**\n    Returns array that looks like this:\n    [\n      {\n        params: {\n          id: 'ssg-ssr'\n        }\n      },\n      {\n        params: {\n          id: 'pre-rendering'\n        }\n      }\n    ]\n   */\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    }\n  })\n}\n\nexport async function getPostData(id: string) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n  // use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents);\n\n  // use remark to convert markdown to HTML string\n  const processedContent = await remark().use(html).process(matterResult.content)\n  const contentHTML = processedContent.toString();\n\n  // Combine data with the id and contentHTML\n\n  return {\n    id, \n    contentHTML,\n    ...matterResult.data as {date: string, title: string}\n  }\n}\n"]},"metadata":{},"sourceType":"module"}