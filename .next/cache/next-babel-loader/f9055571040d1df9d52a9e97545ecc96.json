{"ast":null,"code":"import fs from 'fs';\nimport path from 'path';\nexport default ((req, res) => {\n  const postsDirectory = path.join(process.cwd(), 'posts'); // I love ES6 babbyyyyyy\n\n  const {\n    title,\n    text,\n    username\n  } = req.body;\n  console.log(postsDirectory); // create url id / filename\n\n  const url = title.toLowerCase().replace(' ', '-'); // check to see if unique title\n\n  const fileNames = fs.readdirSync(postsDirectory);\n  fileNames.forEach(filename => {\n    // get ride of .md\n    if (filename.replace(/\\.md$/, '') == url) {\n      res.status(400).json({\n        text: 'Title already exists'\n      });\n      return;\n    }\n  }); // create write stream\n\n  const fileStream = fs.createWriteStream(postsDirectory + url + '.md');\n  res.status(200).json({\n    filestream: fileStream\n  });\n  /*\n  // write to the md file\n  fileStream.write('---\\r\\n');\n  fileStream.write('title: \\'' + title + '\\'\\r\\n');\n  fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n  fileStream.write('---\\r\\n\\r\\n');\n  fileStream.write(text);\n  // create finish event callback\n  fileStream.on('finish', () => {\n    res.status(200).json({ text: 'Blog Successfully Uploaded' });\n    return;\n  });\n  // create errror event callback\n  fileStream.on('error', (err) => {\n    res.status(404).json({ text: `Error in Callback: ${err}` });\n    return;\n  })\n  */\n});","map":{"version":3,"sources":["/Users/gabepetersen/Desktop/Projects/DadsBlog/dadblog/pages/api/post-blog.tsx"],"names":["fs","path","req","res","postsDirectory","join","process","cwd","title","text","username","body","console","log","url","toLowerCase","replace","fileNames","readdirSync","forEach","filename","status","json","fileStream","createWriteStream","filestream"],"mappings":"AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,gBAAe,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,QAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB,CAD4D,CAE5D;;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA4BR,GAAG,CAACS,IAAtC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ,EAL4D,CAO5D;;AACA,QAAMU,GAAG,GAAGN,KAAK,CAACO,WAAN,GAAoBC,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAZ,CAR4D,CAS5D;;AACA,QAAMC,SAAS,GAAGjB,EAAE,CAACkB,WAAH,CAAed,cAAf,CAAlB;AACAa,EAAAA,SAAS,CAACE,OAAV,CAAmBC,QAAD,IAAc;AAC9B;AACA,QAAIA,QAAQ,CAACJ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,KAAiCF,GAArC,EAA0C;AACxCX,MAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEb,QAAAA,IAAI,EAAE;AAAR,OAArB;AACA;AACD;AACF,GAND,EAX4D,CAkB5D;;AACA,QAAMc,UAAU,GAAGvB,EAAE,CAACwB,iBAAH,CAAsBpB,cAAc,GAAGU,GAAjB,GAAuB,KAA7C,CAAnB;AAEAX,EAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACG,IAAAA,UAAU,EAAEF;AAAb,GAArB;AAEA;;;;;;;;;;;;;;;;;;AAkBD,CAzCD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fs from 'fs';\nimport path from 'path';\n\nexport default (req: NextApiRequest, res: NextApiResponse) => {\n  const postsDirectory = path.join(process.cwd(), 'posts');\n  // I love ES6 babbyyyyyy\n  const { title, text, username } = req.body;\n\n  console.log(postsDirectory);\n\n  // create url id / filename\n  const url = title.toLowerCase().replace(' ', '-');\n  // check to see if unique title\n  const fileNames = fs.readdirSync(postsDirectory);\n  fileNames.forEach((filename) => {\n    // get ride of .md\n    if (filename.replace(/\\.md$/, '') == url) {\n      res.status(400).json({ text: 'Title already exists' });\n      return;\n    }\n  });\n  // create write stream\n  const fileStream = fs.createWriteStream((postsDirectory + url + '.md'));\n\n  res.status(200).json({filestream: fileStream});\n\n  /*\n  // write to the md file\n  fileStream.write('---\\r\\n');\n  fileStream.write('title: \\'' + title + '\\'\\r\\n');\n  fileStream.write('date: \\'' + new Date() + '\\'\\r\\n');\n  fileStream.write('---\\r\\n\\r\\n');\n  fileStream.write(text);\n  // create finish event callback\n  fileStream.on('finish', () => {\n    res.status(200).json({ text: 'Blog Successfully Uploaded' });\n    return;\n  });\n  // create errror event callback\n  fileStream.on('error', (err) => {\n    res.status(404).json({ text: `Error in Callback: ${err}` });\n    return;\n  })\n  */\n}\n\n"]},"metadata":{},"sourceType":"module"}